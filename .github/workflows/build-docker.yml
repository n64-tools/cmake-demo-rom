name: docker build
on:
  push:
  pull_request:

jobs:
  cmake-container-test-build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/n64-tools/gcc-toolchain-mips64:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}

      volumes:
        - my_docker_volume:/volume_mount
      # options: --cpus 1

    steps:
      - name: Check for dockerenv file
        run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)

      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1 # we only require the last check-in, unless we want to create a changelog.

      - name: Checkout libdragon lib Code
        uses: actions/checkout@v3
        with:
          repository: dragonminded/libdragon
          path: libdragon
          fetch-depth: 1 # we only require the last check-in, unless we want to create a changelog.

      - name: Build libdragon and tools
        run: |
          echo 'default directory listing:'
          cd libdragon
          ./build.sh
          mkdir ldscripts
          cp *.ld ldscripts/
        continue-on-error: true

      - name: Check directory output
        run: |
          echo 'default directory listing:'
          ls -R .
        continue-on-error: true

      - name: Create ROM output DIR
        run: |
          mkdir ./build
        continue-on-error: true
          
      - name: Generate CMake files
        run: >-
          cd ./build && cmake -G Ninja
          -DCMAKE_TOOLCHAIN_FILE=../CMake/toolchain.libdragon.cmake
          -DTOOLCHAIN_PREFIX=../toolchain/gcc-toolchain-mips64
          -DLIBDRAGON_PREFIX=../toolchain/libdragon
          -DHARDWARE_TYPE=FLASHCART
          -DSDK_TYPE=LIBDRAGON
          -DCMAKE_MAKE_PROGRAM=ninja
          ..
        continue-on-error: true

      - name: Build ROM using CMake
        run: |
          cmake --build ./build --target all --config Release
        continue-on-error: true

      # - name: Check build output
      #   run: |
      #     echo 'build dir listing:'
      #     cd ${{ github.workspace }}/build
      #     ls -R .
      #   continue-on-error: true

      - name: Publish Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ROM
          path: |
            ./build/*.elf
            ./build/*.bin
            ./build/*.v64
        continue-on-error: true